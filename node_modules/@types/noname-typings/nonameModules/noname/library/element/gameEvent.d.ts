export class GameEvent implements PromiseLike<Result & {result: Result}> {
    static initialGameEvent(): void;
    constructor(name?: string | GameEvent, trigger?: boolean);
    name: string;
    _triggered: number | null;
    result: Result;
    type: string;
    source: Player;
    player: Player;
    players: Player[];
    target: Player;
    targets: Player[];
    card: Card;
    cards: Card[];
    skill: string;
    forced: boolean;
    num: number;
    original_num: number;
    _trigger: GameEvent;
    triggername: string;
    notrigger: boolean;
    _notrigger: Player[];
    _result: Result;
    _set: [string, any][];
    custom: {
        add: {
            [type: string]: () => void;
        };
        replace: {
            [type: string]: () => void;
        };
    };
    directHit: boolean;
    baseDamage: number;
    extraDamage: number;
    customSource: Player;
    nature: string;
    unreal: boolean;
    excludeButton: Button[];
    filterStop: (this: GameEvent) => any | undefined | void | null;
    cost_data: Result["cost_data"];
    judging: boolean;
    judge2: Function | undefined;
    orderingCards: Card[];
    ai: Function | undefined;
    _aiexclude: string[];
    forceDie: boolean;
    _oncancel: Function | undefined;
    includeOut: boolean;
    addNumber(key: keyof this, value?: number, baseValue?: number): this;
    decrease(key: keyof this, baseValue?: number): this;
    increase(key: keyof this, baseValue?: number): this;
    subtractNumber(key: keyof this, value?: number, baseValue?: number): this;
    callHandler(type: Parameters<typeof this.hasHandler>[0], event: GameEvent, option: {
        state?: "begin" | "end";
    }): this;
    getDefaultHandlerType(): string;
    getHandler(type?: Parameters<typeof this.hasHandler>[0]): ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[];
    hasHandler(type?: `on${Capitalize<string>}`): boolean;
    pushHandler(...handlers: ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[][]): number;
    pushHandler(type: Parameters<typeof this.hasHandler>[0], ...handlers: ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[][]): number;
    putStepCache(key: any, value: any): this;
    _stepCache: {};
    getStepCache(key: any): any;
    clearStepCache(key: any): this;
    callFuncUseStepCache(prefix: any, func: any, params: any): any;
    putTempCache(key1: any, key2: any, value: any): any;
    _tempCache: {};
    getTempCache(key1: any, key2: any): any;
    changeToZero(): this;
    numFixed: boolean;
    finish(): void;
    finished: boolean;
    cancel(all: any, player: any, notrigger: any): GameEvent;
    neutralize(event?: GameEvent): Promise<Result & {
        result: Result;
    }>;
    _neutralized: boolean;
    _neutralize_event: GameEvent;
    unneutralize(): void;
    goto(step: any): this;
    set step(num: number);
    get step(): number;
    redo(): this;
    setHiddenSkill(skill: any): this;
    set(key: any, value: any, ...args: any[]): this;
    setContent(content: import("./GameEvent/compilers/IContentCompiler.js").EventCompileable): this;
    content: import("./GameEvent/compilers/IContentCompiler.js").EventCompiledContent;
    /**
     * @deprecated
     */
    setContents(content: import("./GameEvent/compilers/IContentCompiler.js").EventCompileable): this;
    getLogv(): any;
    send(): this;
    resume(): this;
    /**
     * 获取事件的父节点。
     * 获取事件链上的指定事件。
     * 默认获取上一个父节点（核心）。
     * @param level 获取深度（number）/指定名字（string）/指定特征（function）
     * @param forced 若获取不到节点，默认返回{}，若forced为true则返回null
     * @param includeSelf 若level不是数字，指定搜索时是否包含事件本身
     * @returns
     */
    getParent(level?: number | string | ((evt: GameEvent) => boolean), forced?: boolean, includeSelf?: boolean): GameEvent | {} | null;
    getTrigger(): any;
    getRand(name: any): any;
    _rand_map: {};
    _rand: number;
    insert(content: any, map: any): GameEvent;
    insertAfter(content: any, map: any): GameEvent;
    backup(skill: any): this;
    _backup: any;
    filterButton: any;
    selectButton: any;
    filterTarget: any;
    selectTarget: any;
    ignoreMod: boolean;
    filterCard2: any;
    filterCard: any;
    filterOk: any;
    selectCard: any;
    position: any;
    complexSelect: any;
    complexCard: any;
    complexTarget: any;
    ai1: any;
    ai2: any;
    restore(): this;
    fakeforce: any;
    _buttonChoice: any;
    _cardChoice: any;
    _targetChoice: any;
    _skillChoice: any;
    isMine(): boolean;
    isOnline(): boolean;
    notLink(): boolean;
    isPhaseUsing(player: any): boolean;
    addTrigger(skills: any, player: any): this;
    removeTrigger(skills: any, player: any): this;
    trigger(name: string): GameEvent;
    untrigger(all: boolean, player: any): this;
    /**
     * @deprecated
     */
    toPromise(): this;
    /**
     * @deprecated
     */
    toEvent(): this;
    parent: GameEvent | void | null;
    childEvents: GameEvent[];
    _triggering: GameEvent | undefined;
    next: GameEvent[];
    after: GameEvent[];
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1, TResult2>(
        onfulfilled?: ((event: Result & { result: Result }) => TResult1 | Promise<TResult1>) | null,
        onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | null
    ): Promise<TResult1 | TResult2>;
	/**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    catch<TResult>(
        onrejected?: ((reason: any) => TResult | Promise<TResult>) | null
    ): Promise<Result & { result: Result } | TResult>;
	/**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
	 */
	finally(onfinally?: (() => void) | null): Promise<Result & {result: Result}> 
    resolve(): void;
    start(): Promise<void>;
    loop(): Promise<void>;
    waitNext(): Promise<void | Result>;
    /**
     * 获取 Result 对象中的信息。
     * @example
     * ```js
     // 示例 1：
     const chooseCardResult = await player.chooseCard().forResult();
     // 获取整个结果对象，然后访问如 chooseCardResult.cards 等属性
     
     // 示例 2：
     const cards = await player.chooseCard().forResult('cards');
     // 获取结果对象中 'cards' 属性的值
     
     // 示例 3：
     const [success, cards, targets] = await player.chooseCardTarget().forResult('bool', 'cards', 'targets');
     // 获取结果对象中多个属性的值
     // - success 表示是否成功
     // - cards 表示选择的卡片
     // - targets 表示选择的目标
     ```
     */
    forResult<T extends keyof Result>(): Promise<Result>;
    forResult<T extends keyof Result>(param0: T): Promise<Exclude<Result[T], undefined>>;
    forResult<T extends keyof Result>(params: T[]): Promise<Exclude<Result[T], undefined>[]>;
    /**
     * 返回result中的bool项
     */
    forResultBool(): Promise<boolean>;
    /**
     * 返回result中的targets项。
     */
    forResultTargets(): Promise<Player[]>;
    /**
     * 返回result中的cards项
     */
    forResultCards(): Promise<Card[]>;
    /**
     * 返回result中的card项
     *
     * @returns 返回的card项。
     *
     */
    forResultCard(): Promise<VCard> | Promise<Card>;
    /**
     * 返回result中的control项。
     */
    forResultControl(): Promise<string>;
    /**
     * 返回result中的links项。
     */
    forResultLinks(): Promise<any[]>;
    onError(error: any): void;
    /**
     * 在某个异步事件中调试变量信息
     *
     * 注: 在调试步骤中`定义的变量只在当前输入的语句有效`
     *
     * @example
     * 在技能中调试技能content相关的信息
     * ```js
     * await event.debugger();
     * ```
     * 在技能中调试触发此技能事件的相关的信息
     * ```js
     * await trigger.debugger();
     * ```
     */
    debugger(): Promise<void>;
    #private;
}
