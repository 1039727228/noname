interface _When {
    /**一次性技能的内容，一个then中写一个step中的内容 */
    then(fun: OldContentFuncByAll): _When
    /**添加临时技能的必要筛选条件，只有当添加的筛选条件都通过时，才能触发 */
    filter(fun: (event: GameEvent, player: Player) => boolean): _When
    /**
     * 向临时技能中添加技能可以拥有的一切属性,最终会添加到event.xxx
     *  */
    assign(obj: Skill): _When
    /**与filter相反，用于移除一个筛选条件 */
    removeFilter(fun: (event: GameEvent, player: Player) => boolean): _When
    /**添加临时技能的充分筛选条件，只要有一个添加的筛选条件通过时，就会触发 */
    filter2(fun: (event: Event, player: Player) => boolean): _When
    /**与filter2相反，用于移除一个筛选条件 */
    removeFilter2(fun: (event: Event, player: Player) => boolean): _When
    /**触发时，弹出的显示提示字样 */
    popup(str: string): _When
    /**
     * 用于在then中用到的变量
     * ```
     * player.when('useCard').vars({
     * targets:result.targets
     * }).then(()=>{
     * //这里面可以使用vars中传递的参数
     * targets.gain()
     * })
     * ```
    */
    vars(obj: SMap<any>): _When
    /**
    * 传递外部作用域
    *
    * 一般是传递一个 code=>eval(code) 函数
    *
    * 传递后可在then中使用外部变量(vars的上位替代)
    * @example
    * let _var = 1;
     * let me = player;
     * player.when('drawAfter')
     * 		.apply(code => eval(code))
     * 		.then(() => console.log(_var))//可以使用外部作用域
     * 		.then('me.gainMaxHp(5)');//可以使用外部变量
     * 
    *
    */
    apply(fun: Function): _When
}

